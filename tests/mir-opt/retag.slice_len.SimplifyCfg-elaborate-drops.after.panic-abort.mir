// MIR for `slice_len` after SimplifyCfg-elaborate-drops

fn slice_len(_1: &[i32], _2: *const [i32], _3: &(i32, [i32]), _4: &[i32; 4]) -> () {
    debug sl => _1;
    debug sl_raw => _2;
    debug sl_tail => _3;
    debug ar => _4;
    let mut _0: ();
    let _5: usize;
    let mut _6: &[i32];
    let mut _8: &[i32];
    let mut _10: &[i32];
    let mut _12: &[i32];
    let mut _13: &[i32; 4];
    scope 1 {
        debug _len => _5;
        let _7: usize;
        scope 2 {
            debug _len => _7;
            let _9: usize;
            scope 4 {
                debug _len => _9;
                let _11: usize;
                scope 5 {
                    debug _len => _11;
                }
            }
        }
        scope 3 {
        }
    }

    bb0: {
        Retag([fn entry] _1);
        Retag([fn entry] _3);
        Retag([fn entry] _4);
        StorageLive(_5);
        StorageLive(_6);
        _5 = Len((*_1));
        StorageDead(_6);
        StorageLive(_7);
        StorageLive(_8);
        _7 = Len((*_2));
        StorageDead(_8);
        StorageLive(_9);
        StorageLive(_10);
        _9 = Len(((*_3).1: [i32]));
        StorageDead(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        _13 = &(*_4);
        _12 = move _13 as &[i32] (PointerCoercion(Unsize));
        Retag(_12);
        StorageDead(_13);
        _11 = core::slice::<impl [i32]>::len(move _12) -> [return: bb1, unwind unreachable];
    }

    bb1: {
        StorageDead(_12);
        _0 = const ();
        StorageDead(_11);
        StorageDead(_9);
        StorageDead(_7);
        StorageDead(_5);
        return;
    }
}
